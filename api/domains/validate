#!/usr/bin/php
<?php
/*
 * Copyright (C) 2019 Nethesis S.r.l.
 * http://www.nethesis.it - nethserver@nethesis.it
 *
 * This script is part of NethServer.
 *
 * NethServer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * NethServer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NethServer.  If not, see COPYING.
*/


require_once("/usr/libexec/nethserver/api/lib/Helpers.php");
require_once("/usr/libexec/nethserver/api/lib/EsmithDatabase.php");

$ddb = new EsmithDatabase('domains');

$data = readInput();
list($hostname, $domainname) = explode('.', gethostname(), 2);


// Deletion: ensure the key exists
if ($data['action'] == 'delete') {
    if(! $ddb->getKey($data['domain']['name'])) {
        error(array(
            'type' => 'NotFound',
            'message' => 'key_not_found',
            'value' => $data['domain']['name'],
        ));
    } else {
        success();
    }
}

// Create/Edit: check for key existence
if($data['action'] == 'create') {
    if($ddb->getKey($data['domain']['name'])) {
        error(array(
            'type' => 'KeyError',
            'message' => 'key_already_exists',
            'value' => $data['domain']['name'],
        ));
    }
} elseif($data['action'] == 'edit' || $data['action'] == 'edit-dkim') {
    if(! $ddb->getKey($data['domain']['name'])) {
        error(array(
            'type' => 'NotFound',
            'message' => 'key_not_found',
            'value' => $data['domain']['name'],
        ));
    }
}

// Business rule: the primary mailbox domain cannot be relayed if we have dovecot
if($data['domain']['TransportType'] == 'Relay' 
    && @file_exists('/etc/e-smith/db/configuration/defaults/dovecot/type') 
    && $domainname == $data['domain']['name']) {
    echo json_encode(array(
        "type" => "NotValid",
        "message" => "validation_failed",
        "attributes" => array(
            array(
                "parameter" => "TransportType",
                "value" => "Relay",
                "error" => "valid_relay_notprimarydomain"
            )
        )
    ));
    exit(1);
}

// Create/Edit: check field values
$v = new LegacyValidator($data['domain']);
$transportTypeValidator = $v->createValidator()->memberOf('LocalDelivery', 'Relay');
$v->declareParameter('name', Validate::HOSTNAME_FQDN);
$v->declareParameter('Description', Validate::ANYTHING);
$v->declareParameter('TransportType', $transportTypeValidator);
$v->declareParameter('DisclaimerStatus', Validate::SERVICESTATUS);
$v->declareParameter('OpenDkimStatus', Validate::SERVICESTATUS);
$v->declareParameter('AlwaysBccStatus', Validate::SERVICESTATUS);


if($data['domain']['AlwaysBccStatus'] == 'enabled') {
    $v->declareParameter('AlwaysBccAddress', Validate::EMAIL);
}

if($data['domain']['TransportType'] == 'Relay') {
    $v->declareParameter('RelayHost', Validate::HOSTNAME);
}

if($data['domain']['DisclaimerStatus'] == 'enabled') {
    $v->declareParameter('DisclaimerText', $v->createValidator()->maxLength(2048));
}


// Validate the input
if ($v->validate()) {
    success();
} else {
    error($v);
}

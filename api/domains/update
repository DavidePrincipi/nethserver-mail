#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use esmith::ConfigDB;
use esmith::event;
use JSON;

require '/usr/libexec/nethserver/api/lib/helper_functions.pl';

my $eventName = undef;
my $ret;
my $exitCode = 0;
my $db = esmith::ConfigDB->open('domains');
my $disclaimerInstalled = -x '/usr/libexec/nethserver/disclaimer-send';
my $input = readInput();
my $domainName = $input->{'domain'}->{'name'};

my %props = (
    'DisclaimerStatus' => $input->{'domain'}->{'DisclaimerStatus'},
    'TransportType' => $input->{'domain'}->{'TransportType'},
    'RelayHost' => $input->{'domain'}->{'RelayHost'},
    'Description' => $input->{'domain'}->{'Description'},
    'AlwaysBccStatus' => $input->{'domain'}->{'AlwaysBccStatus'},
    'AlwaysBccAddress' => $input->{'domain'}->{'AlwaysBccAddress'},
    'UnknownRecipientsActionType' => $input->{'domain'}->{'UnknownRecipientsActionType'},
    'UnknownRecipientsActionDeliverMailbox' => mailbox_unique_identifier($input->{'domain'}->{'unknownRecipientMailbox'}),
);

if($input->{'action'} eq 'create') {
    $eventName = 'domain-create';
    $db->new_record($domainName, {'type' => 'domain', %props});
} elsif($input->{'action'} eq 'delete') {
    $eventName = 'domain-delete';
    $db->set_prop($domainName, 'type', 'domain-deleted');
} elsif($input->{'action'} eq 'edit') {
    $eventName = 'domain-modify';
    $db->get($domainName)->merge_props(%props);
} elsif($input->{'action'} eq 'edit-dkim') {
    $eventName = 'domain-modify';
    $db->get($domainName)->merge_props(
        'OpenDkimStatus' => $input->{'domain'}->{'OpenDkimStatus'}
    );
} 

#
# Write/Delete the disclaimer in raw, html and txt format
# The txt format must be ASCII, otherwise we may break the MIME rfc
#
if($disclaimerInstalled) {
    my $disclaimerFilePrefix = "/var/lib/nethserver/mail-disclaimers/$domainName";
    if($input->{'action'} eq 'delete')   {
        unlink $disclaimerFilePrefix . '.raw';
        unlink $disclaimerFilePrefix . '.html';
        unlink $disclaimerFilePrefix . '.txt';
    } elsif($input->{'domain'}->{'DisclaimerStatus'} eq 'enabled') {
        open(my $fh, '>:encoding(UTF-8)', $disclaimerFilePrefix . '.raw');
        print $fh $input->{'domain'}->{'DisclaimerText'};
        close($fh);
        system('/usr/bin/markdown', '-o', $disclaimerFilePrefix . '.html', $disclaimerFilePrefix . '.raw');
        system('/usr/bin/iconv', '-f', 'UTF-8', '-t', 'ASCII//TRANSLIT', '-o', $disclaimerFilePrefix . '.txt', $disclaimerFilePrefix . '.raw');
    }
}

my @eventArgs = $domainName;

esmith::event::set_json_log(1);

if(esmith::event::event_signal($eventName, @eventArgs)) {
    $ret = {'state' => 'success'};
    if($input->{'action'} eq 'delete') {
        $db->reload();
        $db->get($domainName)->delete();
    }
} else {
    $ret = {
        'type' => 'Error',
        'message' => 'domains.api_update_failed',
        'attributes' => {
            'event_name' => $eventName,
            'event_args' => \@eventArgs,
        }
    };
    $exitCode = 1;
}

print encode_json($ret);
exit($exitCode);


#
# Helpers
#
sub mailbox_unique_identifier
{
    my $mailbox = shift;
    if($mailbox->{'type'} eq 'public') {
        return 'vmail+' . $mailbox->{'name'};
    } else {
        return $mailbox->{'name'};
    }
}
#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use esmith::ConfigDB;
use esmith::event;
use JSON;

require '/usr/libexec/nethserver/api/lib/helper_functions.pl';
require '/usr/libexec/nethserver/api/nethserver-mail/lib/mail_functions.pl';

sub set_builtin_record
{
    my $name = shift;
    my $type = shift;
    my $access = shift; 
    my $db = shift;

    my $record = $db->get($name);
    if (!$record) {
        my $defaults = get_defaults($type, esmith::ConfigDB->open());
        $defaults->{'type'} = $type;
        if ($type eq 'user') {
            my $forward = $defaults->{'MailForwardAddress'};
            $defaults->{'MailSpamRetentionTime'} .= 'd'; # add final 'd'
            $defaults->{'MailForwardAddress'} = join(',', @$forward);
        }
        $record = $db->new_record($name, $defaults);
    }
    $record->set_prop('MailAccess', $access);
}

my $eventName = 'pseudonym-modify';
my @eventArgs = ();
my $ret;
my $exitCode = 0;
my @accounts;
my $db = esmith::ConfigDB->open('accounts');

my $input = readInput();
my $cmd = $input->{'action'};

if ($cmd eq 'update-pseudonym') {
    my $account = $input->{'Account'};

    $db->set_prop($input->{'name'}, 'Description', $input->{'Description'});
    $db->set_prop($input->{'name'}, 'Access', $input->{'Access'});

    foreach (@$account) {
        if ($_->{'type'} eq 'public') {
            $_->{'name'} = "vmail+".$_->{'name'};
        }
        push(@accounts, $_->{'name'});
    }
    $db->set_prop($input->{'name'}, 'Account', join(",", @accounts));

} elsif ($cmd eq 'update-builtin') {
    set_builtin_record($input->{'name'}, $input->{'type'}, $input->{'Access'}, $db);

} else {
    error();
}

esmith::event::set_json_log(1);

if(esmith::event::event_signal($eventName, @eventArgs)) {
    $ret = {'state' => 'success'};
} else {
    $ret = {
        'type' => 'Error',
        'message' => 'common.api_update_failed',
        'attributes' => {
            'event_name' => $eventName,
            'event_args' => \@eventArgs,
        }
    };
    $exitCode = 1;
}

print encode_json($ret);
exit($exitCode);

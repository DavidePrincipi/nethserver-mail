#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;
use esmith::NetworksDB;
use NethServer::Service;
use File::Path qw(make_path);
use JSON;

require '/usr/libexec/nethserver/api/lib/helper_functions.pl';
require '/usr/libexec/nethserver/api/nethserver-mail/lib/mail_functions.pl';

sub is_running
{
    my $service = shift || 0;
    my $db = shift || 0;
    my $s = NethServer::Service->new($service, $db) || return 0;
    return $s->is_running() ? 1 : 0;
}


my $input = readInput();
my $cmd = $input->{'action'};

if ($cmd eq 'live') {
    # 
    # Read stats for dashboard 
    #
    my $ret = {};
    my $cdb = esmith::ConfigDB->open_ro();
    my $adb = esmith::ConfigDB->open_ro('accounts');
    my $ddb = esmith::ConfigDB->open_ro('domains');
    my $gdb = esmith::ConfigDB->open_ro('getmail');

    # Services
    $ret->{'services'} = {};
    my @services = ("dovecot", "postfix", "rspamd", 'clamd@rspamd', "opendkim");
    foreach (@services) {
        $ret->{'services'}{$_} = is_running($_, $cdb);
    }

    # Configuration summary
    $ret->{'configuration'}{'SmartHostStatus'} = $cdb->get_prop('postfix', 'SmartHostStatus') || 'disabled';
    for (qw(BlockAttachmentStatus SpamCheckStatus VirusCheckStatus)) {
        $ret->{'configuration'}{$_} = $cdb->get_prop('rspamd', $_) || 'disabled';
    }

    # Queue
    my $list = decode_json(`/usr/sbin/postqueue -p | head -n 4000 | /usr/libexec/nethserver/mailq2json`);
    $ret->{'queue'} = scalar @$list;

    # Domain list
    my @domains = $ddb->get_all();
    # perl magic: extract only keys and return a reference to the array
    $ret->{'domains'} = [ map {$_->key} @domains ];

    # Counters
    $ret->{'statistics'}{'domains'} = scalar @domains;
    $ret->{'statistics'}{'mailboxes'} = int(`find /var/lib/nethserver/vmail/ -maxdepth 3 -type d -name new  | wc -l`);
    $ret->{'statistics'}{'pseudonyms'} = scalar $adb->get_all_by_prop('type' => 'pseudonym');
    $ret->{'statistics'}{'externals'} = $gdb ? scalar $gdb->get_all_by_prop('status' => 'enabled') : 0;

    # Quota
    $ret->{'quota'}{'status'} = $cdb->get_prop('dovecot', 'QuotaStatus') || 'disabled';
    $ret->{'quota'}{'messages'} = 0;
    $ret->{'quota'}{'size'} = 0;
    if ($ret->{'quota'}{'status'} eq 'enabled') {
        my $quota = decode_json(`/usr/libexec/nethserver/mail-quota`);
        foreach (keys %$quota) {
            my $fields = $quota->{$_};
            $ret->{'quota'}{'messages'} = $ret->{'quota'}{'messages'} + ($fields->{'msg'} || 0);
            $ret->{'quota'}{'size'} = $ret->{'quota'}{'size'} + ($fields->{'size'} || 0);
        }
        $ret->{'quota'}{'size'} = $ret->{'quota'}{'size'} * 1024;
    }

    # Rspamd stats
    $ret->{'rspamd'} = {};
    if (defined($ret->{'services'}{'rspamd'}) && $ret->{'services'}{'rspamd'}) {
        $ret->{'rspamd'} = read_rspamd("auth");
    }

    # Packages
    my %packages = (
        'server' => '/etc/e-smith/db/configuration/defaults/dovecot/type',
        'p3scan' => '/etc/e-smith/db/configuration/defaults/p3scan/type',
        'filter' => '/etc/e-smith/db/configuration/defaults/rspamd/type',
        'getmail' => '/usr/bin/rspamc-getmail',
        'disclaimer' => '/etc/postfix/disclaimer'
    );
    foreach (keys %packages) {
        $ret->{'packages'}{$_} = (-e $packages{$_}) ? 1 : 0;
    }

    # Connections
    foreach (qw(imaps imap submission smtp pop3 pop3s)) {
        my $count = `ss -H -4 -o state established '( dport = :$_ or sport = :$_ )' | wc -l`;
        chomp $count;
        $ret->{'connections'}{$_} = $count;
    }

    # Antivirus
    $ret->{'clamav-update'} = 0;
    foreach (glob('/var/lib/clamav/*.{cvd,cld,ndb,hdb,cdb}')) {
        my $mtime =  my $mode = (stat($_))[9];
        if ($mtime > $ret->{'clamav-update'}) {
            $ret->{'clamav-update'} = $mtime;
        }
    }

    print encode_json($ret);

} elsif ($cmd eq 'logs') {

    my $spool_dir = '/var/spool/nethserver-cockpit/nethserver-mail';
    my $spool_file = $spool_dir.'/logs-cache.json';
    make_path($spool_dir);

    # if the cache has non-zero size and been created in the last 60 minutes, just return it
    if (-s $spool_file && ((stat $spool_file)[9])+3600 > time() ) {
        system("cat $spool_file");
    } else {
        my $out = `/usr/libexec/nethserver/api/nethserver-mail/dashboard/pflogsumj --zero_fill --detail 5 /var/log/maillog`;
        error() if ($? > 0);

        # output and save
        print $out;

        my $fh;
        open($fh, '>', $spool_file) or exit(0); # ignore errors
        print $fh $out;
        close $fh;
    }

} else {
    error();
}
